#!/usr/bin/env python3
"""
Script de verificaci√≥n de conectividad para KandaStory Backend
Ejecutar este script para verificar que todas las conexiones funcionen correctamente.
"""

import os
import sys
import asyncio
import aiohttp
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

async def test_mongodb_connection():
    """Probar conexi√≥n a MongoDB"""
    print("üîó Probando conexi√≥n a MongoDB...")
    try:
        db_uri = os.getenv("DB_URI")
        if not db_uri:
            print("‚ùå DB_URI no est√° configurado en .env")
            return False
        
        client = AsyncIOMotorClient(db_uri)
        # Probar la conexi√≥n
        await client.admin.command('ping')
        print("‚úÖ Conexi√≥n a MongoDB exitosa")
        await client.close()
        return True
    except Exception as e:
        print(f"‚ùå Error conectando a MongoDB: {e}")
        return False

async def test_backend_health():
    """Probar que el backend est√© respondiendo"""
    print("üîó Probando salud del backend...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://127.0.0.1:8000/") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Backend respondiendo: {data}")
                    return True
                else:
                    print(f"‚ùå Backend responde con c√≥digo: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Error conectando al backend: {e}")
        print("   üí° Aseg√∫rate de que el backend est√© ejecut√°ndose en puerto 8000")
        return False

def test_openai_config():
    """Verificar configuraci√≥n de OpenAI"""
    print("üîó Verificando configuraci√≥n de OpenAI...")
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY no est√° configurado en .env")
        return False
    elif not api_key.startswith("sk-"):
        print("‚ùå OPENAI_API_KEY no tiene formato v√°lido (debe empezar con 'sk-')")
        return False
    else:
        print("‚úÖ OPENAI_API_KEY configurado correctamente")
        return True

def test_jwt_config():
    """Verificar configuraci√≥n de JWT"""
    print("üîó Verificando configuraci√≥n de JWT...")
    jwt_secret = os.getenv("JWT_SECRET")
    if not jwt_secret:
        print("‚ùå JWT_SECRET no est√° configurado en .env")
        return False
    elif jwt_secret == "change-me" or len(jwt_secret) < 32:
        print("‚ö†Ô∏è  JWT_SECRET deber√≠a ser m√°s seguro (m√≠nimo 32 caracteres)")
        return False
    else:
        print("‚úÖ JWT_SECRET configurado correctamente")
        return True

def test_cors_config():
    """Verificar configuraci√≥n de CORS"""
    print("üîó Verificando configuraci√≥n de CORS...")
    cors_origins = os.getenv("BACKEND_CORS_ORIGINS")
    if not cors_origins:
        print("‚ùå BACKEND_CORS_ORIGINS no est√° configurado en .env")
        return False
    
    origins = [o.strip() for o in cors_origins.split(',') if o.strip()]
    frontend_urls = [
        "http://localhost:5173",
        "http://127.0.0.1:5173"
    ]
    
    missing_origins = []
    for url in frontend_urls:
        if url not in origins:
            missing_origins.append(url)
    
    if missing_origins:
        print(f"‚ö†Ô∏è  CORS: Faltan or√≠genes para el frontend: {missing_origins}")
        print(f"   Configuraci√≥n actual: {origins}")
        return False
    else:
        print("‚úÖ CORS configurado correctamente para el frontend")
        return True

async def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üöÄ KandaStory Backend - Verificaci√≥n de Conectividad")
    print("=" * 60)
    
    # Verificar archivo .env
    if not os.path.exists(".env"):
        print("‚ùå Archivo .env no encontrado")
        print("   üí° Copiar .env.example a .env y configurar las variables")
        return
    
    tests = [
        ("Configuraci√≥n JWT", test_jwt_config),
        ("Configuraci√≥n CORS", test_cors_config),
        ("Configuraci√≥n OpenAI", test_openai_config),
        ("Conexi√≥n MongoDB", test_mongodb_connection),
        ("Salud del Backend", test_backend_health),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        if asyncio.iscoroutinefunction(test_func):
            result = await test_func()
        else:
            result = test_func()
        results.append((test_name, result))
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE VERIFICACI√ìN:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las verificaciones pasaron! El backend deber√≠a funcionar correctamente.")
    else:
        print("‚ö†Ô∏è  Hay problemas que deben resolverse antes de que el backend funcione correctamente.")
        print("üí° Revisa la documentaci√≥n en README.md para m√°s detalles.")

if __name__ == "__main__":
    asyncio.run(main())
